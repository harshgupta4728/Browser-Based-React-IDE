import { useEffect, useMemo, useRef, useState } from 'react'
import { SandpackProvider, SandpackLayout, SandpackCodeEditor, SandpackPreview, SandpackConsole } from '@codesandbox/sandpack-react'
import { githubLight } from '@codesandbox/sandpack-themes'
import { v4 as uuidv4 } from 'uuid'
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels'
import { clsx } from 'clsx'

type FileItem = { path: string; content: string }

const defaultFiles: Record<string, string> = {
  '/index.html': '<div id="root"></div>',
  '/styles.css': 'body{font-family:sans-serif;padding:16px}',
  '/App.jsx': `export default function App(){return <div style={{padding:16}}>Hello CipherStudio</div>}`,
  '/index.jsx': `import React from 'react';import { createRoot } from 'react-dom/client';import App from './App';import './styles.css';createRoot(document.getElementById('root')).render(<App />)`
}

const templates: Record<string, Record<string,string>> = {
  react: defaultFiles,
  component: { '/NewComponent.jsx': `export default function NewComponent(){return <div>New</div>}` }
}

function useLocalProject() {
  const [projectId, setProjectId] = useState<string>(() => new URLSearchParams(location.search).get('projectId') || uuidv4())
  const storageKey = `cipherstudio:${projectId}`
  const [name, setName] = useState('CipherStudio Project')
  const [files, setFiles] = useState<Record<string,string>>(() => {
    const raw = localStorage.getItem(storageKey)
    return raw ? JSON.parse(raw).files : { ...defaultFiles }
  })
  const [activePath, setActivePath] = useState<string>('/index.jsx')
  const [autosaveEnabled, setAutosaveEnabled] = useState<boolean>(() => {
    const raw = localStorage.getItem(storageKey)
    return raw ? JSON.parse(raw).autosaveEnabled !== false : true
  })

  useEffect(() => {
    const url = new URL(location.href)
    url.searchParams.set('projectId', projectId)
    history.replaceState(null, '', url.toString())
  }, [projectId])

  useEffect(() => {
    if (!autosaveEnabled) return
    const data = { projectId, name, files, entry: '/index.jsx', autosaveEnabled }
    localStorage.setItem(storageKey, JSON.stringify(data))
  }, [projectId, name, files, autosaveEnabled])

  return { projectId, setProjectId, name, setName, files, setFiles, activePath, setActivePath, autosaveEnabled, setAutosaveEnabled }
}

function FileTree({ files, activePath, onOpen, onNewFile, onRename, onDelete }:{ files:Record<string,string>; activePath:string; onOpen:(p:string)=>void; onNewFile:()=>void; onRename:(oldP:string,newP:string)=>void; onDelete:(p:string)=>void }){
  const paths = Object.keys(files).sort()
  return (
    <div style={{padding:8}}>
      <div className="row" style={{justifyContent:'space-between'}}>
        <b>Files</b>
        <button className="btn" onClick={onNewFile}>New</button>
      </div>
      <ul style={{listStyle:'none',padding:0,margin:8}}>
        {paths.map(p => (
          <li key={p} className={clsx(p===activePath && 'active')} style={{display:'flex',alignItems:'center',gap:6,margin:'4px 0'}}>
            <button className="btn" onClick={() => onOpen(p)} style={{flex:1,textAlign:'left'}}>{p}</button>
            <button className="btn" onClick={() => {
              const np = prompt('Rename to', p) || p
              if (np!==p) onRename(p,np)
            }}>Rename</button>
            <button className="btn" onClick={() => onDelete(p)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  )
}

export default function App(){
  const { projectId, name, setName, files, setFiles, activePath, setActivePath, autosaveEnabled, setAutosaveEnabled } = useLocalProject()
  const [consoleOpen, setConsoleOpen] = useState(true)
  const theme = githubLight
  const onNewFile = () => {
    const t = prompt('Template: react | component | empty', 'component') || 'empty'
    const filePath = prompt('File path', t==='react' ? '/index.jsx' : '/NewComponent.jsx') || '/new.js'
    setFiles(prev => ({ ...prev, ...(t==='empty' ? { [filePath]: '' } : (templates[t]||{[filePath]:''})) }))
    setActivePath(filePath)
  }
  const onRename = (oldPath:string,newPath:string) => {
    setFiles(prev => {
      const copy = { ...prev }
      if (copy[oldPath] === undefined) return copy
      copy[newPath] = copy[oldPath]
      delete copy[oldPath]
      return copy
    })
    if (activePath===oldPath) setActivePath(newPath)
  }
  const onDelete = (path:string) => {
    setFiles(prev => {
      const copy = { ...prev }
      delete copy[path]
      return copy
    })
    if (activePath===path) setActivePath('/index.jsx')
  }

  const onCodeUpdate = (path:string, code:string) => {
    setFiles(prev => ({ ...prev, [path]: code }))
  }

  const spFiles = useMemo(() => files, [files])

  return (
    <div className="layout">
      <div className="topbar">
        <input className="input" value={name} onChange={(e)=>setName(e.target.value)} style={{minWidth:260}} />
        <span>Project: {projectId.slice(0,8)}</span>
        <label className="row"><input type="checkbox" checked={autosaveEnabled} onChange={(e)=>setAutosaveEnabled(e.target.checked)} /> Autosave</label>
      </div>
      <div className="content">
        <PanelGroup direction="horizontal">
          <Panel defaultSize={20} minSize={16}>
            <div className="sidebar">
              <FileTree files={files} activePath={activePath} onOpen={setActivePath} onNewFile={onNewFile} onRename={onRename} onDelete={onDelete} />
            </div>
          </Panel>
          <PanelResizeHandle />
          <Panel minSize={20}>
            <div className="center">
              <SandpackProvider files={spFiles} customSetup={{ dependencies: { react: 'latest', 'react-dom': 'latest' } }} theme={theme} options={{ activeFile: activePath }}>
                <SandpackLayout style={{height:'100%'}}>
                  <div className="editor">
                    <SandpackCodeEditor showTabs closableTabs showLineNumbers wrapContent />
                  </div>
                </SandpackLayout>
              </SandpackProvider>
            </div>
          </Panel>
          <PanelResizeHandle />
          <Panel defaultSize={40} minSize={25}>
            <div className="right">
              <SandpackProvider files={spFiles} customSetup={{ dependencies: { react: 'latest', 'react-dom': 'latest' } }} theme={theme} options={{ activeFile: activePath, recompileMode: 'delayed', recompileDelay: 300 }}>
                <div className="preview">
                  <SandpackPreview showOpenInCodeSandbox={false} showRefreshButton />
                </div>
                {consoleOpen && <div className="console"><SandpackConsole showHeader /></div>}
              </SandpackProvider>
            </div>
          </Panel>
        </PanelGroup>
      </div>
    </div>
  )
}


